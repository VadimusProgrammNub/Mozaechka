using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Kyrs_work
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void groupBox2_Enter(object sender, EventArgs e)
        {

        }

        Bitmap AnIm;    //переменная, с изображением, в коротой будут проводится все измерения и браться нужные данные
        int wIm/*ширина изображения*/, hIm/*высота изображения*/, WP/*ширина PictureBox*/, HP/*высота PictureBox*/, Kol_W/*кол-во стоблцов*/, Kol_H/*кол-во строк*/; 
        PictureBox[,] Puzz; //массив, в котором будет находится последовательно весь пазл
        Bitmap[,] Im;   //массив,через который разделяется изображение на куски
        PictureBox[,] rand; //массив, в который заносятся рандомно части изображения
        PictureBox F = null, S = null  /*, B = null*/; // PictureBox"ы для перемещений частей пазла
        PictureBox[,] Pvo;

        private void button1_Click(object sender, EventArgs e)  //Загрузка изображения
        {
            try
            {

                Bitmap IM;      //буферная переменная для конвертации оригинального изображния, для помещения в  pictureBox
                OpenFileDialog OrigImage = new OpenFileDialog();    //создаем новый объект класс OpenFileDialog чтобы вызвать диалоговое окно для добавления файла
                OrigImage.InitialDirectory = "C:\\";    //указываем путь 
                OrigImage.Filter = "Image files(*.BMP;*.JPG;*.GIF;*.PNG)|*.BMP;*.JPG;*.GIF;*.PNG|All files (*.*)|*.*";  //фильтруем файлы в той или иной папке, чтобы видеть только нужные файлы
                OrigImage.ShowDialog();     //вывод диалогового окна
                IM = new Bitmap(OrigImage.FileName);    //Преобразование файла в нужный нам формат для pictureBox
                pictureBox1.Image = IM;     //Вывод изображения в pictureBox
                pictureBox1.Controls.Clear();   //очистить pictureBox от добавленных в него pictureBox"ов с элементами пазла
                AnIm = new Bitmap(pictureBox1.Image);   //сохраняем оригинал изображения
                Puzz = null;    //обнуляем pictureBox"ы и  Bitmap, в случае, если они не пусты
                Im = null;
                rand = null;

            }
            catch { }
        }

        private void button2_Click(object sender, EventArgs e) //разложение изображения на сетку и перемешивание
        {
            if (pictureBox1.Image == null)  //если pictureBox1 вывести сообщение
            {
                MessageBox.Show("                           ОТСУТСТВУЕТ ИЗОБРАЖЕНИЕ!!! \n Выберите изображение через кнопку загрузка изображения");
            }
            else
            {
                wIm = AnIm.Width;   //узнаем ширину изображения
                hIm = AnIm.Height;  //высоту изобаржения
                WP = pictureBox1.Width; //ширину pictureBox
                HP = pictureBox1.Height;    //высоту pictureBox
                //в зависимости от того, какой radioButton выбран, задать следующее количество столбцов и строк
                if (radioButton1.Checked == true)   
                {
                    Kol_W = 4;  //количество столбцов
                    Kol_H = 3;  //количество строк
                }
                if (radioButton2.Checked == true)
                {
                    Kol_W = 5;
                    Kol_H = 4;
                }
                if (radioButton3.Checked == true)
                {
                    Kol_W = 6;
                    Kol_H = 5;
                }
                if (radioButton4.Checked == true)
                {
                    Kol_W = 7;
                    Kol_H = 6;
                }
                //если ни один из radioButton не нажат
                if (radioButton1.Checked == false && radioButton2.Checked == false && radioButton3.Checked == false && radioButton4.Checked == false)
                {
                    MessageBox.Show("               НЕ ЗАДАН РАМЕР СЕТКИ ДЛЯ Puzzle Image!!! \n                     Задайте размер сетки для раскладки");
                }
                AnalizIm();     //вызов метода по нажатию кнопки
            }
        }

        void AnalizIm()     //анализ изображения и деление на квадраты
        {
            try
            {
                int Wkv = wIm/ Kol_W;   //вычисляем ширину части изображения
                int Hkv = hIm / Kol_H;    //вычисляем высоту части изображения
                int Wkv1 = WP / Kol_W;  //вычисляем ширину части PictureBox
                int Hkv1 = HP / Kol_H;  //вычисляем высоту части PictureBox
                Puzz = new PictureBox[Kol_W, Kol_H];    //указываем размеры массива PictureBox
                Im = new Bitmap[Kol_W, Kol_H];  //указываем размеры массива изображений

                for (int i = 0; i < Kol_W; i++) //инициализируем массив для последовательного заполнения массива частями изображения по строке
                {
                    for (int j = 0; j < Kol_H; j++) //инициализируем массив для последовательного заполнения массива частями изображения по столбцу
                    {
                        if (Puzz[i, j] == null) //если указанный элемент пуст, тогда
                        {
                            Bitmap buf = null;  //буффераня перемменная, серез которую переносим нужное значение в массив
                            Rectangle rect = new Rectangle(Wkv * i, Hkv *j, Wkv, Hkv);  //переменная, в которой указываются координаты изображения  размер нужной части изображения для деления на части
                            Im[i, j] = AnIm.Clone(rect, AnIm.PixelFormat);  //клонируем эту часть в массив на нужное нам место
                            buf = Im[i, j]; //копируем этот же элемент в буффер
                            Puzz[i, j] = new PictureBox();  //создаем новый элемент PictureBox
                            Puzz[i, j].Image = buf;//копируем из буффера в массив часть изображения
                            Puzz[i, j].Size = new System.Drawing.Size(Wkv1, Hkv1);   //задаем размер каждого PictureBox для правильного отображения на форме
                            Puzz[i, j].SizeMode = PictureBoxSizeMode.StretchImage;  //задаем свойство PictureBox StretchImage, чтобы часть изображения не выходила за пределы PictureBox
                            Puzz[i, j].BorderStyle = BorderStyle.Fixed3D;   //выделяем каждый из элементов PictureBox
                        }
                        Puzz[i, j].Location = new Point(Wkv1 * (i % Kol_W), Hkv1 * (j % Kol_H)); //прорисовываем каждый элемент в форме 
                        if (!pictureBox1.Controls.Contains(Puzz[i, j])) //если часть изображения отсутствует
                            pictureBox1.Controls.Add(Puzz[i, j]);   //добавить ее в PictureBox
                    }
                }
                Raskl(Wkv1, Hkv1);  //вызов метода рандомного перемешивания
            }
            catch { }
        }

        void Raskl(int Wkv1, int Hkv1)  //метод рандомного перемешивания
        {
            rand = new PictureBox[Kol_W, Kol_H];    //указываем размер массива
            bool[,] prov = new bool[Kol_W, Kol_H];  // проверочная переменная, для исключения повторов и наложений
            int m = 0, n = 0;   //переменные в которых вычисляется рандомные значения для расположения частей в массиве

            for (int i = 0; i < Kol_W; i++) //инициализируем массив для рандомного расположения части по строке, каждой последующей части 
            {
                for (int j = 0; j < Kol_H; j++) //инициализируем массив для рандомного расположения части по столбцу, каждой последующей части 
                {
                    do  //выполнять цикл, пока while не примет значение false
                    {                         
                        Random random = new Random();   //переменная рандома
                        m = random.Next() % Kol_W;  //вычисляем строку, в которой будет находится элемент через операцию MOD, т.е. по модулю в массиве
                        n = random.Next() % Kol_H;  //вычисляем столбец, в которой будет находится элемент через операцию MOD, т.е. по модулю в массиве
                        int str = m * Wkv1; //вычисляем расположение элемента в PictureBox, координаты
                        int stol = n * Hkv1;
                        if (rand[m, n] == null) //если вычисленный элемент массива пуст
                        {
                            Puzz[i, j].Location = new Point(str, stol); //прорисовать его в этом месте по ранее определенным координатам
                            rand[m, n] = Puzz[i, j];    //приравнять этот элемент массива рандом, к элементу массива, где части последовательны
                            prov[i, j] = true;  //последовательно задаем true каждому элементу проверочного массива
                        }
                    } while (prov[i, j] != true);
                    rand[m, n].MouseClick += new MouseEventHandler(pictureBox1_MouseClick);  //каждый элемент массива воспринимает клик, как событие над ним           
                }
            }
            pictureBox1.Image = null;
            Pvo = new PictureBox[Kol_W, Kol_H];

        }
        void Moved(PictureBox F, PictureBox S)   //метод перемещения частей разла
        {

            int X1=0, Y1=0, X2=0, Y2=0; //переменные координат двух частей
            for (int i = 0; i < Kol_W; i++) //инициализируем массив для выяснения разположения каждой части по строке
            {
                for (int j = 0; j < Kol_H; j++) //инициализируем массив для выяснения разположения каждой части по столбцу
                {
                    if (rand[i, j] == F) //если часть, захваченная в первый клик соответствует какому - то значению в массиве
                    {
                        X1 = i; //узнаем расположение захваченной части в первый клик в массиве
                        Y1 = j;
                    }
                    if (rand[i, j] == S)//если часть, захваченная во второй клик соответствует какому - то значению в массиве
                    {
                        X2 = i;//узнаем расположение захваченной части во второй клик в массиве
                        Y2 = j;
                    }
                    ////if (rand[i,j].Image == Puzz[i,j].Image)
                    ////    Pvo[i, j] = Puzz[i, j];
                }
            }
